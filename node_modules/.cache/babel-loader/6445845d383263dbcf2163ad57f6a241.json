{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\sgz2\\\\Desktop\\\\dashboard_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\sgz2\\\\desktop\\\\dashboard_frontend\\\\src\\\\components\\\\RadioButtonGrid\\\\EnjoyabilityRadioButtonGroup.js\";\nimport React, { useState } from 'react';\nimport RadioGroup from './RadioGroup';\nimport { AllRadioOutputContext } from '../../contexts/AllRadioOutputContext/AllRadioOutputContext';\nvar options = [{\n  label: 'N/A',\n  value: 'not_applicable'\n}, {\n  label: 'Enjoyability',\n  value: 'enjoyability'\n}, {\n  label: 'No Enjoyability',\n  value: 'no_enjoyability'\n}];\nexport default function EnjoyabilityRadioButtonGroup() {\n  var _useState = useState('not_applicable'),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var radioContext = useContext(AllRadioOutputContext);\n\n  var onChange = function onChange(e) {\n    setValue(e.target.value);\n\n    if (e.target.value === 'effects_on_people') {\n      radioContext.radioDispatch({\n        type: 'enjoyability'\n      });\n    } else if (e.target.value === 'no_effect_on_people') {\n      radioContext.radioDispatch({\n        type: 'noEnjoyability'\n      });\n    } else if (e.target.value === 'not_applicable') {\n      radioContext.radioDispatch({\n        type: 'noEnjoyability'\n      });\n    }\n  };\n\n  return React.createElement(RadioGroup, {\n    value: value,\n    options: options,\n    name: \"enjoyability\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["C:\\Users\\sgz2\\desktop\\dashboard_frontend\\src\\components\\RadioButtonGrid\\EnjoyabilityRadioButtonGroup.js"],"names":["React","useState","RadioGroup","AllRadioOutputContext","options","label","value","EnjoyabilityRadioButtonGroup","setValue","radioContext","useContext","onChange","e","target","radioDispatch","type"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,qBAAR,QAAoC,4DAApC;AAIA,IAAMC,OAAO,GAAG,CACd;AAAEC,EAAAA,KAAK,EAAE,KAAT;AAAgBC,EAAAA,KAAK,EAAE;AAAvB,CADc,EAEd;AAAED,EAAAA,KAAK,EAAE,cAAT;AAAyBC,EAAAA,KAAK,EAAE;AAAhC,CAFc,EAGd;AAAED,EAAAA,KAAK,EAAE,iBAAT;AAA4BC,EAAAA,KAAK,EAAE;AAAnC,CAHc,CAAhB;AAOA,eAAe,SAASC,4BAAT,GAAwC;AAAA,kBAC3BN,QAAQ,CAAC,gBAAD,CADmB;AAAA;AAAA,MAC9CK,KAD8C;AAAA,MACvCE,QADuC;;AAErD,MAAMC,YAAY,GAAGC,UAAU,CAACP,qBAAD,CAA/B;;AAGA,MAAMQ,QAAQ,GAAG,SAAXA,QAAW,CAAAC,CAAC,EAAI;AACpBJ,IAAAA,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASP,KAAV,CAAR;;AACA,QAAGM,CAAC,CAACC,MAAF,CAASP,KAAT,KAAmB,mBAAtB,EAA2C;AACzCG,MAAAA,YAAY,CAACK,aAAb,CAA2B;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAA3B;AACD,KAFD,MAEO,IAAGH,CAAC,CAACC,MAAF,CAASP,KAAT,KAAmB,qBAAtB,EAA6C;AAClDG,MAAAA,YAAY,CAACK,aAAb,CAA2B;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAA3B;AACD,KAFM,MAEA,IAAGH,CAAC,CAACC,MAAF,CAASP,KAAT,KAAmB,gBAAtB,EAAwC;AAC7CG,MAAAA,YAAY,CAACK,aAAb,CAA2B;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAA3B;AACD;AACF,GATD;;AAWA,SACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAET,KADT;AAEE,IAAA,OAAO,EAAEF,OAFX;AAGE,IAAA,IAAI,EAAC,cAHP;AAKE,IAAA,QAAQ,EAAEO,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD","sourcesContent":["import React, { useState } from 'react';\r\nimport RadioGroup from './RadioGroup'\r\nimport {AllRadioOutputContext} from '../../contexts/AllRadioOutputContext/AllRadioOutputContext'\r\n\r\n\r\n\r\nconst options = [\r\n  { label: 'N/A', value: 'not_applicable' },\r\n  { label: 'Enjoyability', value: 'enjoyability'},\r\n  { label: 'No Enjoyability', value: 'no_enjoyability' }\r\n];\r\n\r\n\r\nexport default function EnjoyabilityRadioButtonGroup() {\r\n  const [value, setValue] = useState('not_applicable');\r\n  const radioContext = useContext(AllRadioOutputContext);\r\n\r\n\r\n  const onChange = e => {\r\n    setValue(e.target.value);\r\n    if(e.target.value === 'effects_on_people') {\r\n      radioContext.radioDispatch({ type: 'enjoyability'})\r\n    } else if(e.target.value === 'no_effect_on_people') {\r\n      radioContext.radioDispatch({ type: 'noEnjoyability'})\r\n    } else if(e.target.value === 'not_applicable') {\r\n      radioContext.radioDispatch({ type: 'noEnjoyability'})\r\n    }\r\n  };\r\n\r\n  return (\r\n    <RadioGroup\r\n      value={value}\r\n      options={options}\r\n      name=\"enjoyability\"\r\n      \r\n      onChange={onChange}\r\n    />\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}