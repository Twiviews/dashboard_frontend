{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\sgz2\\\\Desktop\\\\dashboard_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\sgz2\\\\Desktop\\\\dashboard_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"C:\\\\Users\\\\sgz2\\\\Desktop\\\\dashboard_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\sgz2\\\\desktop\\\\dashboard_frontend\\\\src\\\\contexts\\\\AllRadioOutputContext\\\\AllRadioOutputContext.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nmutation update_pub_review_paragraphs_by_pk($_set: pub_review_paragraphs_set_input, $pk_columns: pub_review_paragraphs_pk_columns_input!) {\\n    update_pub_review_paragraphs_by_pk(pk_columns: $pk_columns, _set: $_set ) {\\n      why_film_works\\n      why_film_doesnt_work\\n      effects_on_people\\n      enjoyability\\n      how_film_doesnt_work\\n      how_film_works\\n      no_effect_on_people\\n      no_enjoyability\\n      no_production_values\\n      production_values\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { createContext, useReducer, useEffect } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nvar AllRadioOutputReducer = function AllRadioOutputReducer(state, action) {\n  switch (action.type) {\n    case \"effectsonPeople\":\n      return _objectSpread({}, state, {\n        effectsOnPeople: true,\n        noEffectOnPeople: false\n      });\n\n    case \"enjoyability\":\n      return _objectSpread({}, state, {\n        enjoyability: true,\n        noEnjoyability: false\n      });\n\n    case \"howFilmDoesntWork\":\n      return _objectSpread({}, state, {\n        howFilmDoesntWork: true,\n        howFilmWorks: false\n      });\n\n    case \"howFilmWorks\":\n      return _objectSpread({}, state, {\n        howFilmWorks: true,\n        howFilmDoesntWork: false\n      });\n\n    case \"noEffectOnPeople\":\n      return _objectSpread({}, state, {\n        noEffectOnPeople: true,\n        effectsOnPeople: false\n      });\n\n    case \"noEnjoyability\":\n      return _objectSpread({}, state, {\n        noEnjoyability: true,\n        enjoyability: false\n      });\n\n    case \"noProductionValues\":\n      return _objectSpread({}, state, {\n        noProductionValues: true\n      });\n\n    case \"productionValues\":\n      return _objectSpread({}, state, {\n        productionValues: true\n      });\n\n    case \"sentiment_positive\":\n      return _objectSpread({}, state, {\n        sentiment: 'positive'\n      });\n\n    case \"sentiment_negative\":\n      return _objectSpread({}, state, {\n        sentiment: 'negative'\n      });\n\n    case \"sentiment_neutral\":\n      return _objectSpread({}, state, {\n        sentiment: 'neutral'\n      });\n\n    case \"submitted\":\n      return _objectSpread({}, state, {\n        submitted: true\n      });\n  }\n};\n\nvar UPDATE_PARAGRAPH_DATA = gql(_templateObject());\nexport var AllRadioOutputContext = createContext();\n\nvar AllRadioOutput = function AllRadioOutput(props) {\n  var initialState = {\n    effectsOnPeople: false,\n    submitted: false,\n    enjoyability: false,\n    howFilmDoesntWork: false,\n    howFilmWorks: false,\n    noEffectOnPeople: false,\n    noEnjoyability: false,\n    noProductionValues: false,\n    why_film_doesnt_work: false,\n    why_film_works: false,\n    productionValues: false,\n    sentiment: 'neutral'\n  };\n\n  var _useReducer = useReducer(AllRadioOutputReducer, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var _useMutation = useMutation(UPDATE_PARAGRAPH_DATA),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateParagraphs = _useMutation2[0],\n      data = _useMutation2[1].data;\n\n  useEffect(function () {\n    return function () {};\n  }, [state]);\n  useEffect(function () {\n    console.log(state);\n    updateParagraphs({\n      updateParagraphs: updateParagraphs,\n      variables: {\n        pk_columns: {\n          id: 5368\n        },\n        _set: {\n          effects_on_people: state.effectsOnPeople,\n          enjoyability: state.enjoyability,\n          how_film_doesnt_work: state.howFilmDoesntWork,\n          how_film_works: state.howFilmWorks,\n          no_effect_on_people: state.noEffectOnPeople,\n          no_enjoyability: state.noEnjoyability,\n          no_production_values: state.noProductionValues,\n          why_film_doesnt_work: state.why_film_doesnt_work,\n          why_film_works: state.why_film_works,\n          production_values: state.productionValues,\n          sentiment: state.sentiment\n        }\n      }\n    }).then(function (_ref) {\n      var data = _ref.data;\n      console.log(data);\n    });\n    return function () {};\n  }, [state.submitted]);\n  return React.createElement(AllRadioOutputContext.Provider, {\n    value: {\n      effectsOnPeople: state.effectsOnPeople,\n      enjoyability: state.enjoyability,\n      howFilmDoesntWork: state.howFilmDoesntWork,\n      howFilmWorks: state.howFilmWorks,\n      noEffectOnPeople: state.noEffectOnPeople,\n      noEnjoyability: state.noEnjoyability,\n      noProductionValues: state.noProductionValues,\n      why_film_doesnt_work: state.why_film_doesnt_work,\n      why_film_works: state.why_film_works,\n      sentiment: state.sentiment,\n      radioDispatch: dispatch,\n      radioOutputState: state\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default AllRadioOutput;","map":{"version":3,"sources":["C:\\Users\\sgz2\\desktop\\dashboard_frontend\\src\\contexts\\AllRadioOutputContext\\AllRadioOutputContext.js"],"names":["React","createContext","useReducer","useEffect","useQuery","useMutation","gql","AllRadioOutputReducer","state","action","type","effectsOnPeople","noEffectOnPeople","enjoyability","noEnjoyability","howFilmDoesntWork","howFilmWorks","noProductionValues","productionValues","sentiment","submitted","UPDATE_PARAGRAPH_DATA","AllRadioOutputContext","AllRadioOutput","props","initialState","why_film_doesnt_work","why_film_works","dispatch","updateParagraphs","data","console","log","variables","pk_columns","id","_set","effects_on_people","how_film_doesnt_work","how_film_works","no_effect_on_people","no_enjoyability","no_production_values","production_values","then","radioDispatch","radioOutputState","children"],"mappings":"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","sourcesContent":["import React,{createContext,useReducer,useEffect} from 'react';\r\nimport {useQuery,useMutation} from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\n\r\n\r\n\r\n\r\nconst AllRadioOutputReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case \"effectsonPeople\":\r\n            return {\r\n                ...state,\r\n                effectsOnPeople: true,\r\n                noEffectOnPeople: false,\r\n            }\r\n        case \"enjoyability\":\r\n            return {\r\n                ...state,\r\n                enjoyability: true,\r\n                noEnjoyability: false,\r\n        }\r\n        case \"howFilmDoesntWork\":\r\n            return {\r\n            ...state,\r\n            howFilmDoesntWork: true,\r\n            howFilmWorks: false,\r\n        }\r\n        case \"howFilmWorks\":\r\n            return {\r\n                ...state,\r\n                howFilmWorks: true,\r\n                howFilmDoesntWork: false,\r\n            }\r\n        case \"noEffectOnPeople\":\r\n            return {\r\n                ...state,\r\n                noEffectOnPeople: true,\r\n                effectsOnPeople: false,\r\n        }\r\n        case \"noEnjoyability\":\r\n            return {\r\n            ...state,\r\n            noEnjoyability: true,\r\n            enjoyability: false,\r\n        }\r\n        case \"noProductionValues\":\r\n            return {\r\n                ...state,\r\n                noProductionValues: true,\r\n        }\r\n        case \"productionValues\":\r\n        return {\r\n            ...state,\r\n            productionValues: true,\r\n        }\r\n        case \"sentiment_positive\":\r\n            return {\r\n                ...state,\r\n                sentiment: 'positive',\r\n            }\r\n        case \"sentiment_negative\":\r\n            return {\r\n                ...state,\r\n                sentiment: 'negative',\r\n        }\r\n        case \"sentiment_neutral\":\r\n        return {\r\n            ...state,\r\n            sentiment: 'neutral',\r\n        }\r\n        case \"submitted\":\r\n            return {\r\n                ...state,\r\n                submitted: true,\r\n        }\r\n    }\r\n}\r\n\r\nconst UPDATE_PARAGRAPH_DATA = gql`\r\nmutation update_pub_review_paragraphs_by_pk($_set: pub_review_paragraphs_set_input, $pk_columns: pub_review_paragraphs_pk_columns_input!) {\r\n    update_pub_review_paragraphs_by_pk(pk_columns: $pk_columns, _set: $_set ) {\r\n      why_film_works\r\n      why_film_doesnt_work\r\n      effects_on_people\r\n      enjoyability\r\n      how_film_doesnt_work\r\n      how_film_works\r\n      no_effect_on_people\r\n      no_enjoyability\r\n      no_production_values\r\n      production_values\r\n    }\r\n  }\r\n`;\r\n\r\nexport const AllRadioOutputContext = createContext();\r\n\r\nconst AllRadioOutput = props => {\r\n    const initialState = {\r\n       effectsOnPeople : false,\r\n       submitted:false,\r\n       enjoyability: false, \r\n       howFilmDoesntWork: false,\r\n       howFilmWorks: false,\r\n       noEffectOnPeople: false, \r\n       noEnjoyability: false, \r\n       noProductionValues: false, \r\n       why_film_doesnt_work: false, \r\n       why_film_works: false,\r\n       productionValues:false,\r\n       sentiment:'neutral'   \r\n    }\r\n\r\n\r\n    const [state,dispatch] = useReducer(AllRadioOutputReducer,initialState);\r\n\r\n    const [updateParagraphs,{data}] = useMutation(UPDATE_PARAGRAPH_DATA);\r\n    useEffect(() => {\r\n        return () => {\r\n        }\r\n    }, [state])\r\n\r\n    useEffect(() => {\r\n        console.log(state);\r\n        updateParagraphs(\r\n            {\r\n                updateParagraphs,\r\n                variables:\r\n                            {\r\n                                pk_columns: {\r\n                                                id: 5368\r\n                                            }, \r\n                                _set: {\r\n                                    effects_on_people: state.effectsOnPeople, \r\n                                    enjoyability: state.enjoyability, \r\n                                    how_film_doesnt_work: state.howFilmDoesntWork,\r\n                                    how_film_works: state.howFilmWorks,\r\n                                    no_effect_on_people: state.noEffectOnPeople, \r\n                                    no_enjoyability: state.noEnjoyability, \r\n                                    no_production_values: state.noProductionValues, \r\n                                    why_film_doesnt_work: state.why_film_doesnt_work, \r\n                                    why_film_works: state.why_film_works,\r\n                                    production_values:state.productionValues,\r\n                                    sentiment:state.sentiment                               \r\n                                }\r\n                            },\r\n            }\r\n        ).then(({data})=>{\r\n            console.log(data);\r\n        });\r\n        return () => {\r\n        }\r\n    }, [state.submitted])\r\n\r\n\r\n    return (\r\n    <AllRadioOutputContext.Provider\r\n        value = {{\r\n            effectsOnPeople:state.effectsOnPeople,\r\n            enjoyability:state.enjoyability, \r\n            howFilmDoesntWork:state.howFilmDoesntWork,\r\n            howFilmWorks:state.howFilmWorks,\r\n            noEffectOnPeople:state.noEffectOnPeople, \r\n            noEnjoyability:state.noEnjoyability, \r\n            noProductionValues:state.noProductionValues, \r\n            why_film_doesnt_work:state.why_film_doesnt_work, \r\n            why_film_works:state.why_film_works,\r\n            sentiment:state.sentiment,   \r\n            radioDispatch:dispatch,\r\n            radioOutputState:state\r\n        }}\r\n    >    \r\n    {props.children}\r\n    </AllRadioOutputContext.Provider>)\r\n}\r\n\r\n\r\n\r\nexport default AllRadioOutput;\r\n"]},"metadata":{},"sourceType":"module"}