{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\sgz2\\\\Desktop\\\\dashboard_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\sgz2\\\\Desktop\\\\dashboard_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"C:\\\\Users\\\\sgz2\\\\Desktop\\\\dashboard_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\sgz2\\\\desktop\\\\dashboard_frontend\\\\src\\\\contexts\\\\AllRadioOutputContext\\\\AllRadioOutputContext.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nmutation update_pub_review_paragraphs_by_pk($_set: pub_review_paragraphs_set_input, $pk_columns: pub_review_paragraphs_pk_columns_input!) {\\n    update_pub_review_paragraphs_by_pk(pk_columns: $pk_columns, _set: $_set ) {\\n      why_film_works\\n      why_film_doesnt_work\\n      effects_on_people\\n      enjoyability\\n      how_film_doesnt_work\\n      how_film_works\\n      no_effect_on_people\\n      no_enjoyability\\n      no_production_values\\n      production_values\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { createContext, useReducer, useEffect } from 'react';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nvar AllRadioOutputReducer = function AllRadioOutputReducer(state, action) {\n  switch (action.type) {\n    case \"effectsonPeople\":\n      return _objectSpread({}, state, {\n        effectsOnPeople: true,\n        noEffectOnPeople: false\n      });\n\n    case \"enjoyability\":\n      return _objectSpread({}, state, {\n        enjoyability: true,\n        noEnjoyability: false\n      });\n\n    case \"howFilmDoesntWork\":\n      return _objectSpread({}, state, {\n        howFilmDoesntWork: true,\n        howFilmWorks: false\n      });\n\n    case \"howFilmWorks\":\n      return _objectSpread({}, state, {\n        howFilmWorks: true,\n        howFilmDoesntWork: false\n      });\n\n    case \"noEffectOnPeople\":\n      return _objectSpread({}, state, {\n        noEffectOnPeople: true,\n        effectsOnPeople: false\n      });\n\n    case \"noEnjoyability\":\n      return _objectSpread({}, state, {\n        noEnjoyability: true,\n        enjoyability: false\n      });\n\n    case \"noProductionValues\":\n      return _objectSpread({}, state, {\n        noProductionValues: true,\n        productionValues: false\n      });\n\n    case \"productionValues\":\n      return _objectSpread({}, state, {\n        productionValues: true,\n        noProductionValues: false\n      });\n\n    case \"why_film_works\":\n      return _objectSpread({}, state, {\n        why_film_works: true,\n        why_film_doesnt_work: false\n      });\n\n    case \"why_film_doesnt_work\":\n      return _objectSpread({}, state, {\n        why_film_doesnt_work: true,\n        why_film_works: false\n      });\n\n    case \"sentiment\":\n      return _objectSpread({}, state, {\n        sentiment: action.payload\n      });\n\n    case \"setId\":\n      return _objectSpread({}, state, {\n        id: action.payload\n      });\n\n    case \"submitted\":\n      debugger;\n      return _objectSpread({}, state, {\n        submitted: true\n      });\n\n    case \"not_submitted\":\n      return _objectSpread({}, state, {\n        submitted: false\n      });\n  }\n};\n\nvar UPDATE_PARAGRAPH_DATA = gql(_templateObject());\nexport var AllRadioOutputContext = createContext();\n\nvar AllRadioOutput = function AllRadioOutput(props) {\n  var initialState = {\n    effectsOnPeople: false,\n    submitted: false,\n    enjoyability: false,\n    howFilmDoesntWork: false,\n    howFilmWorks: false,\n    noEffectOnPeople: false,\n    noEnjoyability: false,\n    noProductionValues: false,\n    why_film_doesnt_work: false,\n    why_film_works: false,\n    productionValues: false,\n    id: 0,\n    sentiment: 'neutral'\n  };\n\n  var _useReducer = useReducer(AllRadioOutputReducer, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var _useMutation = useMutation(UPDATE_PARAGRAPH_DATA),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateParagraphs = _useMutation2[0],\n      data = _useMutation2[1].data;\n\n  useEffect(function () {\n    return function () {};\n  }, [state]);\n  useEffect(function () {\n    console.log(state);\n    updateParagraphs({\n      updateParagraphs: updateParagraphs,\n      variables: {\n        pk_columns: {\n          id: state.id\n        },\n        _set: {\n          effects_on_people: state.effectsOnPeople,\n          enjoyability: state.enjoyability,\n          how_film_doesnt_work: state.howFilmDoesntWork,\n          how_film_works: state.howFilmWorks,\n          no_effect_on_people: state.noEffectOnPeople,\n          no_enjoyability: state.noEnjoyability,\n          no_production_values: state.noProductionValues,\n          why_film_doesnt_work: state.why_film_doesnt_work,\n          why_film_works: state.why_film_works,\n          production_values: state.productionValues,\n          sentiment: state.sentiment\n        }\n      }\n    }).then(function (_ref) {\n      var data = _ref.data;\n      console.log(data);\n    });\n    return function () {\n      dispatch({\n        type: 'not_submitted'\n      });\n    };\n  }, [state.submitted]);\n  return React.createElement(AllRadioOutputContext.Provider, {\n    value: {\n      effectsOnPeople: state.effectsOnPeople,\n      enjoyability: state.enjoyability,\n      howFilmDoesntWork: state.howFilmDoesntWork,\n      howFilmWorks: state.howFilmWorks,\n      noEffectOnPeople: state.noEffectOnPeople,\n      noEnjoyability: state.noEnjoyability,\n      noProductionValues: state.noProductionValues,\n      why_film_doesnt_work: state.why_film_doesnt_work,\n      why_film_works: state.why_film_works,\n      sentiment: state.sentiment,\n      radioDispatch: dispatch,\n      radioOutputState: state,\n      id: state.id\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default AllRadioOutput;","map":{"version":3,"sources":["C:\\Users\\sgz2\\desktop\\dashboard_frontend\\src\\contexts\\AllRadioOutputContext\\AllRadioOutputContext.js"],"names":["React","createContext","useReducer","useEffect","useQuery","useMutation","gql","AllRadioOutputReducer","state","action","type","effectsOnPeople","noEffectOnPeople","enjoyability","noEnjoyability","howFilmDoesntWork","howFilmWorks","noProductionValues","productionValues","why_film_works","why_film_doesnt_work","sentiment","payload","id","submitted","UPDATE_PARAGRAPH_DATA","AllRadioOutputContext","AllRadioOutput","props","initialState","dispatch","updateParagraphs","data","console","log","variables","pk_columns","_set","effects_on_people","how_film_doesnt_work","how_film_works","no_effect_on_people","no_enjoyability","no_production_values","production_values","then","radioDispatch","radioOutputState","children"],"mappings":"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","sourcesContent":["import React,{createContext,useReducer,useEffect} from 'react';\r\nimport {useQuery,useMutation} from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\n\r\n\r\n\r\n\r\nconst AllRadioOutputReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case \"effectsonPeople\":\r\n            return {\r\n                ...state,\r\n                effectsOnPeople: true,\r\n                noEffectOnPeople: false,\r\n            }\r\n        case \"enjoyability\":\r\n            return {\r\n                ...state,\r\n                enjoyability: true,\r\n                noEnjoyability: false,\r\n        }\r\n        case \"howFilmDoesntWork\":\r\n            return {\r\n            ...state,\r\n            howFilmDoesntWork: true,\r\n            howFilmWorks: false,\r\n        }\r\n        case \"howFilmWorks\":\r\n            return {\r\n                ...state,\r\n                howFilmWorks: true,\r\n                howFilmDoesntWork: false,\r\n            }\r\n        case \"noEffectOnPeople\":\r\n            return {\r\n                ...state,\r\n                noEffectOnPeople: true,\r\n                effectsOnPeople: false,\r\n        }\r\n        case \"noEnjoyability\":\r\n            return {\r\n            ...state,\r\n            noEnjoyability: true,\r\n            enjoyability: false,\r\n        }\r\n        case \"noProductionValues\":\r\n            return {\r\n                ...state,\r\n                noProductionValues: true,\r\n                productionValues: false,\r\n        }\r\n        case \"productionValues\":\r\n        return {\r\n            ...state,\r\n            productionValues: true,\r\n            noProductionValues: false,\r\n\r\n        }\r\n        case \"why_film_works\":\r\n        return {\r\n            ...state,\r\n            why_film_works: true,\r\n            why_film_doesnt_work: false,\r\n        }\r\n        case \"why_film_doesnt_work\":\r\n        return {\r\n            ...state,\r\n            why_film_doesnt_work: true,\r\n            why_film_works: false,\r\n        }\r\n        case \"sentiment\":\r\n        return {\r\n            ...state,\r\n            sentiment: action.payload,\r\n        }\r\n        case \"setId\":\r\n        return {\r\n            ...state,\r\n            id: action.payload,\r\n        }\r\n        case \"submitted\":\r\n           debugger;\r\n            return {\r\n                ...state,\r\n                submitted: true,\r\n        }\r\n        case \"not_submitted\":\r\n         return {\r\n             ...state,\r\n             submitted: false,\r\n     }\r\n    }\r\n}\r\n\r\nconst UPDATE_PARAGRAPH_DATA = gql`\r\nmutation update_pub_review_paragraphs_by_pk($_set: pub_review_paragraphs_set_input, $pk_columns: pub_review_paragraphs_pk_columns_input!) {\r\n    update_pub_review_paragraphs_by_pk(pk_columns: $pk_columns, _set: $_set ) {\r\n      why_film_works\r\n      why_film_doesnt_work\r\n      effects_on_people\r\n      enjoyability\r\n      how_film_doesnt_work\r\n      how_film_works\r\n      no_effect_on_people\r\n      no_enjoyability\r\n      no_production_values\r\n      production_values\r\n    }\r\n  }\r\n`;\r\n\r\nexport const AllRadioOutputContext = createContext();\r\n\r\nconst AllRadioOutput = props => {\r\n    const initialState = {\r\n       effectsOnPeople : false,\r\n       submitted:false,\r\n       enjoyability: false, \r\n       howFilmDoesntWork: false,\r\n       howFilmWorks: false,\r\n       noEffectOnPeople: false, \r\n       noEnjoyability: false, \r\n       noProductionValues: false, \r\n       why_film_doesnt_work: false, \r\n       why_film_works: false,\r\n       productionValues:false,\r\n       id:0,\r\n       sentiment:'neutral'   \r\n    }\r\n\r\n\r\n    const [state,dispatch] = useReducer(AllRadioOutputReducer,initialState);\r\n\r\n    const [updateParagraphs,{data}] = useMutation(UPDATE_PARAGRAPH_DATA);\r\n    useEffect(() => {\r\n        return () => {\r\n        }\r\n    }, [state])\r\n\r\n    useEffect(() => {\r\n        console.log(state);\r\n        updateParagraphs(\r\n            {\r\n                updateParagraphs,\r\n                variables:\r\n                            {\r\n                                pk_columns: {\r\n                                                id: state.id\r\n                                            }, \r\n                                _set: {\r\n                                    effects_on_people: state.effectsOnPeople, \r\n                                    enjoyability: state.enjoyability, \r\n                                    how_film_doesnt_work: state.howFilmDoesntWork,\r\n                                    how_film_works: state.howFilmWorks,\r\n                                    no_effect_on_people: state.noEffectOnPeople, \r\n                                    no_enjoyability: state.noEnjoyability, \r\n                                    no_production_values: state.noProductionValues, \r\n                                    why_film_doesnt_work: state.why_film_doesnt_work, \r\n                                    why_film_works: state.why_film_works,\r\n                                    production_values:state.productionValues,\r\n                                    sentiment:state.sentiment                               \r\n                                }\r\n                            },\r\n            }\r\n        ).then(({data})=>{\r\n            console.log(data);\r\n        });\r\n        return () => {\r\n            dispatch({ type: 'not_submitted'})\r\n        }\r\n    }, [state.submitted])\r\n\r\n\r\n    return (\r\n    <AllRadioOutputContext.Provider\r\n        value = {{\r\n            effectsOnPeople:state.effectsOnPeople,\r\n            enjoyability:state.enjoyability, \r\n            howFilmDoesntWork:state.howFilmDoesntWork,\r\n            howFilmWorks:state.howFilmWorks,\r\n            noEffectOnPeople:state.noEffectOnPeople, \r\n            noEnjoyability:state.noEnjoyability, \r\n            noProductionValues:state.noProductionValues, \r\n            why_film_doesnt_work:state.why_film_doesnt_work, \r\n            why_film_works:state.why_film_works,\r\n            sentiment:state.sentiment,   \r\n            radioDispatch:dispatch,\r\n            radioOutputState:state,\r\n            id:state.id\r\n        }}\r\n    >    \r\n    {props.children}\r\n    </AllRadioOutputContext.Provider>)\r\n}\r\n\r\n\r\n\r\nexport default AllRadioOutput;\r\n"]},"metadata":{},"sourceType":"module"}