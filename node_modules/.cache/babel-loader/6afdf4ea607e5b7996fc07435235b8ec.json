{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\sgz2\\\\Desktop\\\\dashboard_frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\sgz2\\\\desktop\\\\dashboard_frontend\\\\src\\\\components\\\\RadioButtonGrid\\\\OverallSentimentRadioButtonGroup.js\";\nimport React, { useState } from 'react';\nimport RadioGroup from './RadioGroup';\nimport { AllRadioOutputContext } from \"../../contexts/AllRadioOutputContext/AllRadioOutputContext\";\nvar options = [{\n  label: 'Neutral',\n  value: 'neutral'\n}, {\n  label: 'Positive',\n  value: 'positive'\n}, {\n  label: 'Negative',\n  value: 'negative'\n}];\nexport default function OverallSentimentRadioButtonGroup() {\n  var _useState = useState('neutral'),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var radioContext = useContext(AllRadioOutputContext);\n\n  var onChange = function onChange(e) {\n    setValue(e.target.value);\n\n    if (e.target.value === 'neutral') {\n      radioContext.radioDispatch({\n        type: 'sentiment',\n        payload: 'neutral'\n      });\n    } else if (e.target.value === 'positive') {\n      radioContext.radioDispatch({\n        type: 'sentiment',\n        payload: 'positive'\n      });\n    } else if (e.target.value === 'negative') {\n      radioContext.radioDispatch({\n        type: 'sentiment',\n        payload: 'negative'\n      });\n    }\n  };\n\n  return React.createElement(RadioGroup, {\n    value: value,\n    options: options,\n    name: \"sentiment\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["C:\\Users\\sgz2\\desktop\\dashboard_frontend\\src\\components\\RadioButtonGrid\\OverallSentimentRadioButtonGroup.js"],"names":["React","useState","RadioGroup","AllRadioOutputContext","options","label","value","OverallSentimentRadioButtonGroup","setValue","radioContext","useContext","onChange","e","target","radioDispatch","type","payload"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAAQC,qBAAR,QAAoC,4DAApC;AAGA,IAAMC,OAAO,GAAG,CACd;AAAEC,EAAAA,KAAK,EAAE,SAAT;AAAoBC,EAAAA,KAAK,EAAE;AAA3B,CADc,EAEd;AAAED,EAAAA,KAAK,EAAE,UAAT;AAAqBC,EAAAA,KAAK,EAAE;AAA5B,CAFc,EAGd;AAAED,EAAAA,KAAK,EAAE,UAAT;AAAqBC,EAAAA,KAAK,EAAE;AAA5B,CAHc,CAAhB;AAMA,eAAe,SAASC,gCAAT,GAA4C;AAAA,kBAC/BN,QAAQ,CAAC,SAAD,CADuB;AAAA;AAAA,MAClDK,KADkD;AAAA,MAC3CE,QAD2C;;AAEzD,MAAMC,YAAY,GAAGC,UAAU,CAACP,qBAAD,CAA/B;;AAGA,MAAMQ,QAAQ,GAAG,SAAXA,QAAW,CAAAC,CAAC,EAAI;AACpBJ,IAAAA,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASP,KAAV,CAAR;;AACA,QAAGM,CAAC,CAACC,MAAF,CAASP,KAAT,KAAmB,SAAtB,EAAiC;AAC/BG,MAAAA,YAAY,CAACK,aAAb,CAA2B;AAAEC,QAAAA,IAAI,EAAE,WAAR;AAAoBC,QAAAA,OAAO,EAAC;AAA5B,OAA3B;AACD,KAFD,MAEM,IAAGJ,CAAC,CAACC,MAAF,CAASP,KAAT,KAAmB,UAAtB,EAAkC;AACtCG,MAAAA,YAAY,CAACK,aAAb,CAA2B;AAAEC,QAAAA,IAAI,EAAE,WAAR;AAAoBC,QAAAA,OAAO,EAAC;AAA5B,OAA3B;AACD,KAFK,MAEA,IAAGJ,CAAC,CAACC,MAAF,CAASP,KAAT,KAAmB,UAAtB,EAAkC;AACtCG,MAAAA,YAAY,CAACK,aAAb,CAA2B;AAAEC,QAAAA,IAAI,EAAE,WAAR;AAAoBC,QAAAA,OAAO,EAAC;AAA5B,OAA3B;AACD;AACF,GATD;;AAWA,SACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAEV,KADT;AAEE,IAAA,OAAO,EAAEF,OAFX;AAGE,IAAA,IAAI,EAAC,WAHP;AAKE,IAAA,QAAQ,EAAEO,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD","sourcesContent":["import React, { useState } from 'react';\r\nimport RadioGroup from './RadioGroup';\r\nimport {AllRadioOutputContext} from \"../../contexts/AllRadioOutputContext/AllRadioOutputContext\";\r\n\r\n\r\nconst options = [\r\n  { label: 'Neutral', value: 'neutral' },\r\n  { label: 'Positive', value: 'positive'},\r\n  { label: 'Negative', value: 'negative' }\r\n];\r\n\r\nexport default function OverallSentimentRadioButtonGroup() {\r\n  const [value, setValue] = useState('neutral');\r\n  const radioContext = useContext(AllRadioOutputContext)\r\n\r\n\r\n  const onChange = e => {\r\n    setValue(e.target.value);\r\n    if(e.target.value === 'neutral') {\r\n      radioContext.radioDispatch({ type: 'sentiment',payload:'neutral'});\r\n    }else if(e.target.value === 'positive') {\r\n      radioContext.radioDispatch({ type: 'sentiment',payload:'positive'});\r\n    }else if(e.target.value === 'negative') {\r\n      radioContext.radioDispatch({ type: 'sentiment',payload:'negative'});\r\n    }\r\n  };\r\n\r\n  return (\r\n    <RadioGroup\r\n      value={value}\r\n      options={options}\r\n      name=\"sentiment\"\r\n      \r\n      onChange={onChange}\r\n    />\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}